syntax = "proto3";
package peggy.v1;
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/any.proto";

option go_package = "github.com/althea-net/peggy/module/x/peggy/types";

service Msg {
  rpc DelegateKeys(MsgDelegateKeys) returns (MsgDelegateKeysResponse) {
    option (google.api.http).post = "/peggy/v1/delegate_keys";
  }
  rpc SendToEth(MsgSendToEth) returns (MsgSendToEthResponse) {
    option (google.api.http).post = "/peggy/v1/send_to_eth";
  }
  rpc RequestBatch(MsgRequestBatch) returns (MsgRequestBatchResponse) {
    option (google.api.http).post = "/peggy/v1/request_batch";
  }
  rpc SubmitConfirm(MsgSubmitConfirm) returns (MsgSubmitConfirmResponse) {
    option (google.api.http).post = "/peggy/v1/confirm";
  }
  rpc SubmitClaim(MsgSubmitClaim) returns (MsgSubmitClaimResponse) {
    option (google.api.http).post = "/peggy/v1/claim";
  }
  rpc CancelSendToEth(MsgCancelSendToEth) returns (MsgCancelSendToEthResponse) {
    option (google.api.http).post = "/peggy/v1/cancel_send_to_eth";
  }
}

message MsgDelegateKeys {
  string validator    = 1;
  string orchestrator = 2;
  string eth_address  = 3;
}

message MsgDelegateKeysResponse {}

message MsgSendToEth {
  string                   sender   = 1;
  string                   eth_dest = 2;
  cosmos.base.v1beta1.Coin amount   = 3 [
    (gogoproto.nullable) = false
  ];
  cosmos.base.v1beta1.Coin bridge_fee = 4 [
    (gogoproto.nullable) = false
  ];
}

message MsgSendToEthResponse {}

message MsgRequestBatch {
  string validator = 1;
  string denom     = 2;
}

message MsgRequestBatchResponse {}

message MsgSubmitClaim {
  google.protobuf.Any claim = 1 [
    (cosmos_proto.accepts_interface) = "EthereumClaim"
  ];
  string signer = 2;
}

message MsgSubmitClaimResponse {}

message MsgSubmitConfirm {
  google.protobuf.Any confirm = 1 [
    (cosmos_proto.accepts_interface) = "Confirm"
  ];
  string signer = 2;
}

message MsgSubmitConfirmResponse {}

// This call allows the sender (and only the sender)
// to cancel a given MsgSendToEth and recieve a refund
// of the tokens
message MsgCancelSendToEth {
  uint64 transaction_id = 1;
  string sender         = 2;
}

message MsgCancelSendToEthResponse {}
